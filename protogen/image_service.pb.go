// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/image_service.proto

package protogen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImageStreamRequest struct {
	IntervalMs           uint64   `protobuf:"varint,1,opt,name=interval_ms,json=intervalMs,proto3" json:"interval_ms,omitempty"`
	Bitmap               bool     `protobuf:"varint,2,opt,name=bitmap,proto3" json:"bitmap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageStreamRequest) Reset()         { *m = ImageStreamRequest{} }
func (m *ImageStreamRequest) String() string { return proto.CompactTextString(m) }
func (*ImageStreamRequest) ProtoMessage()    {}
func (*ImageStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df85201e21caee65, []int{0}
}

func (m *ImageStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageStreamRequest.Unmarshal(m, b)
}
func (m *ImageStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageStreamRequest.Marshal(b, m, deterministic)
}
func (m *ImageStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageStreamRequest.Merge(m, src)
}
func (m *ImageStreamRequest) XXX_Size() int {
	return xxx_messageInfo_ImageStreamRequest.Size(m)
}
func (m *ImageStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageStreamRequest proto.InternalMessageInfo

func (m *ImageStreamRequest) GetIntervalMs() uint64 {
	if m != nil {
		return m.IntervalMs
	}
	return 0
}

func (m *ImageStreamRequest) GetBitmap() bool {
	if m != nil {
		return m.Bitmap
	}
	return false
}

type ImageStream struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Height               uint64   `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Width                uint64   `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageStream) Reset()         { *m = ImageStream{} }
func (m *ImageStream) String() string { return proto.CompactTextString(m) }
func (*ImageStream) ProtoMessage()    {}
func (*ImageStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_df85201e21caee65, []int{1}
}

func (m *ImageStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageStream.Unmarshal(m, b)
}
func (m *ImageStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageStream.Marshal(b, m, deterministic)
}
func (m *ImageStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageStream.Merge(m, src)
}
func (m *ImageStream) XXX_Size() int {
	return xxx_messageInfo_ImageStream.Size(m)
}
func (m *ImageStream) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageStream.DiscardUnknown(m)
}

var xxx_messageInfo_ImageStream proto.InternalMessageInfo

func (m *ImageStream) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImageStream) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ImageStream) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImageStream) GetWidth() uint64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func init() {
	proto.RegisterType((*ImageStreamRequest)(nil), "image_service.ImageStreamRequest")
	proto.RegisterType((*ImageStream)(nil), "image_service.ImageStream")
}

func init() { proto.RegisterFile("proto/image_service.proto", fileDescriptor_df85201e21caee65) }

var fileDescriptor_df85201e21caee65 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0x08, 0x15, 0x5c, 0x81, 0xc1, 0xaa, 0x50, 0xe8, 0x42, 0xe9, 0xd4, 0x25, 0x09,
	0x50, 0x31, 0x22, 0x24, 0x36, 0x86, 0x0e, 0xa4, 0x1b, 0x4b, 0xe5, 0x84, 0x93, 0x73, 0x02, 0x3b,
	0xc1, 0x76, 0x5a, 0xe5, 0xdf, 0xa3, 0x5c, 0x82, 0xd4, 0x0a, 0xb1, 0xdd, 0x7b, 0xb2, 0xbf, 0x77,
	0xf7, 0xe0, 0xba, 0xb6, 0x95, 0xaf, 0x52, 0xd2, 0x52, 0xe1, 0xc6, 0xa1, 0xdd, 0x52, 0x81, 0x09,
	0x7b, 0xe2, 0xe2, 0xc0, 0x9c, 0xaf, 0x40, 0xbc, 0x76, 0xc6, 0xda, 0x5b, 0x94, 0x3a, 0xc3, 0xef,
	0x06, 0x9d, 0x17, 0x37, 0x30, 0x26, 0xe3, 0xd1, 0x6e, 0xe5, 0xd7, 0x46, 0xbb, 0x28, 0x98, 0x05,
	0x8b, 0x30, 0x83, 0x5f, 0x6b, 0xe5, 0xc4, 0x15, 0x8c, 0x72, 0xf2, 0x5a, 0xd6, 0xd1, 0xd1, 0x2c,
	0x58, 0x9c, 0x66, 0x83, 0x9a, 0x23, 0x8c, 0xf7, 0x70, 0x62, 0x02, 0x27, 0x1c, 0xc7, 0x84, 0xf3,
	0xac, 0x17, 0x42, 0x40, 0xe8, 0xdb, 0x1a, 0xf9, 0xeb, 0x59, 0xc6, 0x73, 0x07, 0x2c, 0x91, 0x54,
	0xe9, 0xa3, 0x63, 0x0e, 0x1b, 0x54, 0x47, 0xd8, 0xd1, 0x87, 0x2f, 0xa3, 0x90, 0xed, 0x5e, 0x3c,
	0x10, 0x4c, 0xfa, 0x98, 0x6e, 0x5f, 0x53, 0xe0, 0xba, 0xbf, 0x46, 0xbc, 0xc1, 0xe5, 0x5e, 0x3c,
	0x19, 0x25, 0x6e, 0x93, 0xc3, 0x12, 0xfe, 0x1e, 0x3b, 0x9d, 0xfe, 0xff, 0xe4, 0x2e, 0x78, 0x79,
	0x7e, 0x7f, 0x52, 0xe4, 0xcb, 0x26, 0x4f, 0x8a, 0x4a, 0xa7, 0xbb, 0xa6, 0x6d, 0xa4, 0x69, 0xe9,
	0x7e, 0xf9, 0x98, 0xe6, 0x68, 0x8a, 0x52, 0x4b, 0xfb, 0x19, 0x2b, 0x5b, 0x17, 0x31, 0x43, 0x62,
	0x37, 0x6c, 0x94, 0x72, 0xdb, 0x0a, 0x4d, 0x3e, 0xe2, 0x69, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x59, 0xcf, 0x0d, 0x10, 0x94, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImageSequenceServiceClient is the client API for ImageSequenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImageSequenceServiceClient interface {
	ImageStreaming(ctx context.Context, in *ImageStreamRequest, opts ...grpc.CallOption) (ImageSequenceService_ImageStreamingClient, error)
}

type imageSequenceServiceClient struct {
	cc *grpc.ClientConn
}

func NewImageSequenceServiceClient(cc *grpc.ClientConn) ImageSequenceServiceClient {
	return &imageSequenceServiceClient{cc}
}

func (c *imageSequenceServiceClient) ImageStreaming(ctx context.Context, in *ImageStreamRequest, opts ...grpc.CallOption) (ImageSequenceService_ImageStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImageSequenceService_serviceDesc.Streams[0], "/image_service.ImageSequenceService/ImageStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageSequenceServiceImageStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageSequenceService_ImageStreamingClient interface {
	Recv() (*ImageStream, error)
	grpc.ClientStream
}

type imageSequenceServiceImageStreamingClient struct {
	grpc.ClientStream
}

func (x *imageSequenceServiceImageStreamingClient) Recv() (*ImageStream, error) {
	m := new(ImageStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageSequenceServiceServer is the server API for ImageSequenceService service.
type ImageSequenceServiceServer interface {
	ImageStreaming(*ImageStreamRequest, ImageSequenceService_ImageStreamingServer) error
}

func RegisterImageSequenceServiceServer(s *grpc.Server, srv ImageSequenceServiceServer) {
	s.RegisterService(&_ImageSequenceService_serviceDesc, srv)
}

func _ImageSequenceService_ImageStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageSequenceServiceServer).ImageStreaming(m, &imageSequenceServiceImageStreamingServer{stream})
}

type ImageSequenceService_ImageStreamingServer interface {
	Send(*ImageStream) error
	grpc.ServerStream
}

type imageSequenceServiceImageStreamingServer struct {
	grpc.ServerStream
}

func (x *imageSequenceServiceImageStreamingServer) Send(m *ImageStream) error {
	return x.ServerStream.SendMsg(m)
}

var _ImageSequenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "image_service.ImageSequenceService",
	HandlerType: (*ImageSequenceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImageStreaming",
			Handler:       _ImageSequenceService_ImageStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/image_service.proto",
}
